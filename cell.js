class Cell{constructor(t,i){this.swarm=[],this.internalForces=[],this.externalForces=[],this.internalMins=[],this.externalMins=[],this.internalRadii=[],this.externalRadii=[],this.positions=[],this.numParticles=40,this.energy=startingEnergy,this.radius=0,this.center=createVector(0,0),this.foodReactivity=[],this.generateNew(t,i)}generateNew(t,i){for(let t=0;t<numTypes;t++){this.internalForces[t]=[],this.externalForces[t]=[],this.internalMins[t]=[],this.externalMins[t]=[],this.internalRadii[t]=[],this.externalRadii[t]=[],this.foodReactivity[t]=random(.1,1);for(let i=0;i<numTypes;i++){const e=random(.1,1),s=random(40,70);this.internalForces[t][i]=e,this.internalMins[t][i]=s,this.internalRadii[t][i]=random(2*s,300);const n=random(-1,1),r=random(40,70);this.externalForces[t][i]=n,this.externalMins[t][i]=r,this.externalRadii[t][i]=random(2*r,300)}}for(let e=0;e<this.numParticles;e++){const s=random(-50,50),n=random(-50,50),r=createVector(t+s,i+n);this.positions[e]=r;const o=1+Math.floor(random(numTypes-1));this.swarm.push(new Particle(r,o))}}copyCell(t){const i=t.internalForces.length;for(let e=0;e<i;e++)for(let s=0;s<i;s++)void 0!==t.internalForces[e][s]?(this.internalForces[e][s]=t.internalForces[e][s],this.internalMins[e][s]=t.internalMins[e][s],this.internalRadii[e][s]=t.internalRadii[e][s],this.externalForces[e][s]=t.externalForces[e][s],this.externalMins[e][s]=t.externalMins[e][s],this.externalRadii[e][s]=t.externalRadii[e][s]):this.generateNew(random(width),random(height));this.foodReactivity=t.foodReactivity.slice();for(let t=0;t<this.numParticles;t++){const i=this.swarm[t].position.copy();this.swarm.push(new Particle(i,this.swarm[t].type))}}mutateCell(){for(let t=0;t<numTypes;t++){for(let i=0;i<numTypes;i++)this.internalForces[t][i]+=random(-.1,.1),this.internalMins[t][i]+=random(-5,5),this.internalRadii[t][i]+=random(-10,10),this.externalForces[t][i]+=random(-.1,.1),this.externalMins[t][i]+=random(-5,5),this.externalRadii[t][i]+=random(-10,10);this.foodReactivity[t]+=random(-.1,.1)}for(let t=0;t<this.numParticles;t++){const i=this.positions[t];i.x+=random(-5,5),i.y+=random(-5,5),random(100)<10&&(this.swarm[t].type=1+Math.floor(random(numTypes-1)))}}update(){for(let t of this.swarm)t.applyInternalForces(this),t.applyExternalForces(this),this.applyFoodForces(t);this.energy-=1}display(){if(drawLines){stroke("white");for(let t=0;t<this.numParticles-1;t++){const i=this.swarm[t],e=this.swarm[t+1];line(i.position.x,i.position.y,e.position.x,e.position.y)}}noStroke();for(let t of this.swarm)t.display()}applyFoodForces(t){let i=createVector(0,0),e=createVector(0,0),s=createVector(0,0);for(let i of food){s.set(0,0),s=i.position.copy(),s.sub(t.position),s.x>.5*width&&(s.x-=width),s.x<-.5*width&&(s.x+=width),s.y>.5*height&&(s.y-=height),s.y<-.5*height&&(s.y+=height);let n=s.mag();if(s.normalize(),n<this.externalRadii[t.type][i.type]){let r=s.copy();r.mult(this.externalForces[t.type][i.type]*this.foodReactivity[t.type]),r.mult(map(n,0,this.externalRadii[t.type][i.type],1,0)),e.add(r)}}i=e.copy(),t.velocity.add(i),t.position.add(t.velocity),t.position.x=(t.position.x+width)%width,t.position.y=(t.position.y+height)%height,t.velocity.mult(friction)}}